<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Wed, 27 Dec 2023 15:38:20 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Public Key Infrastructure]]></title>
            <guid>0c13d6a53ff04351b4b84ebb29cb8095</guid>
            <pubDate>Tue, 26 Dec 2023 00:28:09 GMT</pubDate>
            <content:encoded><![CDATA[<h1 id="public-key-infrastructure">Public Key Infrastructure</h1>
<ul>
<li>
<h2 id="encryption">Encryption</h2>
<ul>
<li>
<h3 id="symmetric">Symmetric</h3>
<ul>
<li>Uses the same secret key to encrypt and decrypt the message</li>
<li><img src="/_resources/185b567f19bf430a9137abdd8307dfc9.png" /></li>
</ul>
</li>
<li>
<h3 id="asymmetric">Asymmetric</h3>
<ul>
<li>It deploys two keys, public key and private key</li>
<li>a public key known by everyone and a private key known only by the owner/receiver</li>
<li>a public key is used to encrypt the message and a private key is used to decrypt it or the other way around</li>
<li><img src="/_resources/e097e367ce3a4ebea48624737d06e5f2.png" /></li>
</ul>
</li>
</ul>
</li>
<li>
<h2 id="hashing">Hashing</h2>
<ul>
<li>A given known input must always produce one known output</li>
<li>Once hashing has been done, it should be impossible to go from the output to the input</li>
<li>Different multiple inputs should give a different output</li>
<li>Modifying an input should mean a change in the hash</li>
</ul>
<p><img src="/_resources/baded6551e81437b80a05689ada837c7.png" /></p>
</li>
<li>
<h2 id="digital-signature">Digital Signature</h2>
<ul>
<li>Encrypted hashed-data</li>
</ul>
<p><img src="/_resources/e0003c7157b24fa8a4396672cb02880a.png" /></p>
</li>
<li>
<h2 id="pki">PKI</h2>
<ul>
<li>
<h3 id="certificate-authorities">Certificate Authorities</h3>
<ul>
<li>Root CA</li>
<li>CA/Intermediate CA</li>
<li>Certificates</li>
</ul>
</li>
<li>
<h3 id="certificate-signed-by-ca">Certificate signed by CA</h3>
<p><img src="/_resources/45bb67c028a14429be015c58a70b8a2d.png" /></p>
</li>
<li>
<h3 id="ca-certificate-signed-by-root-ca">CA Certificate signed by Root CA</h3>
<p><img src="/_resources/6867072e1b6245d596ca188afdc69e20.png" /></p>
</li>
<li>
<h3 id="root-ca-certificate-signed-by-root-private-key">Root CA Certificate signed by Root Private Key</h3>
<p><img src="/_resources/eec88953dc314a38bbaeb73b492aa26a.png" /></p>
</li>
<li>
<h3 id="full-chain">Full-chain</h3>
<p><img src="/_resources/b98f1afe770d48f1b75e8e27e0b5d04f.png" /></p>
</li>
<li>
<h3 id="self-signed-certificate">Self-signed Certificate</h3>
<ul>
<li>Signing a certificate with own Private Key</li>
</ul>
</li>
<li>
<h3 id="ca-signed-certificate">CA-signed Certificate</h3>
<ul>
<li>
<p>Certificate which is verified and endorsed/signed by a CA</p>
</li>
<li>
<p>CA is verified and endorsed/signed by a Root CA</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h2 id="securing-http">Securing HTTP</h2>
<ul>
<li>
<h3 id="cipher-suites">Cipher Suites</h3>
<ul>
<li>
<p>Key Exchange Algorithm</p>
<ul>
<li>RSA, DH, ECDH, DHE, ECDHE, or PSK</li>
</ul>
</li>
<li>
<p>Authentication Algorithm</p>
<ul>
<li>RSA, ECDSA, or DSA</li>
</ul>
</li>
<li>
<p>Bulk Data Encryption Algorithm</p>
<ul>
<li>AES, CHACHA20, Camellia, or ARIA</li>
</ul>
</li>
<li>
<p>Message Authentication Code (MAC) Algorithm</p>
<ul>
<li>SHA-256, and POLY1305</li>
</ul>
</li>
<li>
<p>Example:</p>
<ul>
<li>
<p>Key_Exchange-Authentication-Cipher(Algorithm_Strength-Mode)-Hash/MAC</p>
</li>
<li>
<p>ECDHE-ECDSA-AES128-GCM-SHA256</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="key-exchange-rsa">Key Exchange (RSA)</h3>
<ul>
<li><img src="/_resources/b42c33ec400a4dc8a2cb73cae9be434b.png" /></li>
</ul>
</li>
<li>
<h3 id="lab-exploring-cipher-suites">Lab: Exploring Cipher Suites</h3>
<ul>
<li>
<p>Client Side Ciphers</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl ciphers -V <span class="hljs-string">'ALL:eNULL'</span></code></pre></div>
</li>
</ul>
</li>
<li>
<p>Server Side Ciphers</p>
<ul>
<li>
<div><pre class="hljs"><code>nmap -sV --script ssl-enum-ciphers example.com</code></pre></div>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="certificate-format-x509">Certificate Format (X.509)</h3>
<ul>
<li>
<p>an International Telecommunication Union (ITU) standard defining the format of public key certificates</p>
</li>
<li>
<p>X.509 certificate binds an identity to a public key using a digital signature</p>
</li>
<li>
<p>Contains an identity (a hostname, or an organization, or an individual) and a public key</p>
</li>
<li>
<p><strong>Base64</strong></p>
<ul>
<li>
<p><strong>PEM - Privacy-Enhanced Email</strong></p>
<ul>
<li>Extensions: .pem, .crt, .ca-bundle</li>
<li>Base64 encoded DER files</li>
</ul>
</li>
<li>
<p><strong>PKCS#7 - Public Key Cryptography Standards</strong></p>
<ul>
<li>Extensions: .p7b, .p7s</li>
<li>Mostly used on Windows and Java Tomcat</li>
<li>Cannot store private keys, only primary and intermediate certificates</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Binary</strong></p>
<ul>
<li>
<p><strong>DER - Distinguished Encoding Rules</strong></p>
<ul>
<li>Extensions: .der, .cer</li>
<li>a binary encoding format, rarely used outside of Windows</li>
</ul>
</li>
<li>
<p><strong>PKCS#12</strong></p>
<ul>
<li>Extensions: .pfx, .p12</li>
<li>can include the entire SSL certificate chain and key pair in a single file</li>
<li>password-protected container</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="lab-nginx-ssltls-termination">Lab: Nginx SSL/TLS Termination</h3>
<ul>
<li>
<p>Generating Self-signed certificate</p>
<ul>
<li>
<p>Generate a Private Key</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl genrsa -out server.key 2048</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Extract a Public Key from the key pair</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl rsa -<span class="hljs-keyword">in</span> server.key -outform PEM -pubout -out public.pem</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Create a Certificate Signing Request (CSR)</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl req -key server.key -new -out server.csr -subj <span class="hljs-string">"/C=MM/CN=server.example.com"</span> -addext <span class="hljs-string">"subjectAltName = DNS: www.example.com, DNS: web.example.com"</span></code></pre></div>
</li>
</ul>
</li>
<li>
<p>Generate a Certificate by signing the CSR with its own Private Key</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl x509 -signkey server.key -<span class="hljs-keyword">in</span> server.csr -req -days 365 -out server.crt</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Generate a Certificate without CSR</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl req -key server.key -new -x509 -days 365 -subj <span class="hljs-string">"/C=MM/CN=server.example.com"</span> -addext <span class="hljs-string">"subjectAltName = DNS: www.example.com, DNS: web.example.com"</span> -out server.crt</code></pre></div>
</li>
</ul>
</li>
<li>
<p>One liner Self-signed certificate</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl req -newkey rsa:2048 -keyout server.key -x509 -days 365 -subj <span class="hljs-string">"/C=MM/CN=server.example.com"</span> -addext <span class="hljs-string">"subjectAltName = DNS: www.example.com, DNS: web.example.com"</span> -out server.crt</code></pre></div>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Signing a certificate with an own CA</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl req -newkey rsa:2048 -nodes -keyout ca.key -x509 -days 3650 -subj <span class="hljs-string">"/C=MM/ST=Yangon/L=Yangon/O=Know Your Linux/CN=KYL CA"</span> -out ca.crt
openssl req -newkey rsa:2048 -nodes -keyout server.key -x509 -days 365 -CA ca.crt -CAkey ca.key -subj <span class="hljs-string">"/C=MM/ST=Yangon/L=Yangon/O=Know Your Linux/CN=*.example.com"</span> -out server.crt</code></pre></div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h2 id="troubleshooting-tips">Troubleshooting Tips</h2>
<ul>
<li>
<p>Checking Certificate Expiry</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl s_client -connect server.example.com:443 | openssl x509 -noout -dates</code></pre></div>
</li>
<li>
<div><pre class="hljs"><code>openssl x509 -<span class="hljs-keyword">in</span> server.crt -noout -dates</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Viewing Certificate Info</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl x509 -<span class="hljs-keyword">in</span> server.crt -noout -text</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Checking Private Key's integrity</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl rsa -<span class="hljs-keyword">in</span> server.key -check -noout</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Matching with Private Key and SSL/TLS Certificate</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl x509 -noout -modulus -<span class="hljs-keyword">in</span> server.crt
openssl rsa -noout -modulus -<span class="hljs-keyword">in</span> server.key</code></pre></div>
</li>
<li>
<div><pre class="hljs"><code>[ $(openssl x509 -noout -modulus -<span class="hljs-keyword">in</span> server.crt) == $(openssl rsa -noout -modulus -<span class="hljs-keyword">in</span> server.key) ] &amp;&amp; <span class="hljs-built_in">echo</span> Valid || <span class="hljs-built_in">echo</span> Invalid</code></pre></div>
</li>
</ul>
</li>
<li>
<p>Checking supported TLS Version</p>
<ul>
<li>
<div><pre class="hljs"><code>openssl s_client -connect server.example.com:443 -servername server.example.com -tls1
openssl s_client -connect server.example.com:443 -servername server.example.com -tls1_1
openssl s_client -connect server.example.com:443 -servername server.example.com -tls1_2
openssl s_client -connect server.example.com:443 -servername server.example.com -tls1_3</code></pre></div>
</li>
</ul>
</li>
</ul>
</li>
<li>
<h3 id="encrypting-a-file-with-ssltls-certificate">Encrypting a file with SSL/TLS Certificate</h3>
<ul>
<li>
<div><pre class="hljs"><code>openssl smime -encrypt -aes256 -binary -<span class="hljs-keyword">in</span> file.txt -out file.enc -outform PEM server.crt

openssl smime -decrypt -<span class="hljs-keyword">in</span> file.enc -out decrypted_file.txt -inkey server.key -inform PEM -binary</code></pre></div>
</li>
</ul>
</li>
<li>
<h3 id="signing-a-file-using-a-ssltls-certificate-and-key">Signing a file using a SSL/TLS Certificate and Key</h3>
<ul>
<li>
<div><pre class="hljs"><code>openssl dgst -sha256 -sign tls_private_key.key -out file.sig file.txt

openssl dgst -sha256 -verify server.crt -signature file.sig file.txt</code></pre></div>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My Bash Functions for kubectl]]></title>
            <guid>87a5fd7c1b3e4dfcb3311540ace3becb</guid>
            <pubDate>Sun, 23 Jul 2023 14:36:53 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="how-to-configure">How to Configure</h2>
<p>Just add them to the <code>~/.bashrc</code> or <code>~/.bash_profile</code></p>
<hr />
<h2 id="adding-a-new-kubeconfig-to-existing-config">Adding a new kubeconfig to existing config</h2>
<p>This function is for adding a new <code>kubeconfig</code> to existing default config, <code>~/.kube/config</code></p>
<div><pre class="hljs"><code>kubeadd (){ 
  cp ~<span class="hljs-regexp">/.kube/</span>config ~<span class="hljs-regexp">/.kube/</span>config.$(date +%F) 
  KUBECONFIG=~<span class="hljs-regexp">/.kube/</span>config:<span class="hljs-variable">$1</span> kubectl config view --flatten &gt; <span class="hljs-regexp">/tmp/</span>config 
  mv <span class="hljs-regexp">/tmp/</span>config ~<span class="hljs-regexp">/.kube/</span>config 
  chmod <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.kube/</span>config 
} </code></pre></div>
<h3 id="usage">Usage</h3>
<div><pre class="hljs"><code><span class="hljs-variable">$ </span>kubeadd cluster1.conf</code></pre></div>
<hr />
<h2 id="setting-kubeconfig-for-each-shell">Setting kubeconfig for each shell</h2>
<p>Normally, people uses <code>kubectl config use-context context_name</code> to change the cluster, and that cluster will be the default for all Shell environments. However, we need to access multiple clusters in different shell sessions concurrently. This function can help to achieve that.</p>
<div><pre class="hljs"><code>kubeswitch(){ 
  unset KUBECONFIG
  <span class="hljs-built_in">mkdir</span> -p ${HOME}/.kube/<span class="hljs-built_in">contexts</span>
  select <span class="hljs-built_in">context</span> <span class="hljs-keyword">in</span> $(kubectl config <span class="hljs-built_in">get</span>-<span class="hljs-built_in">contexts</span> -o name); <span class="hljs-keyword">do</span> 
    kubectl config use-<span class="hljs-built_in">context</span> $<span class="hljs-built_in">context</span> &amp;&gt; /dev/null 
    kubectl config <span class="hljs-built_in">view</span> --minify --<span class="hljs-built_in">context</span> $<span class="hljs-built_in">context</span> --<span class="hljs-built_in">flatten</span> &gt; ${HOME}/.kube/<span class="hljs-built_in">contexts</span>/$<span class="hljs-built_in">context</span>.conf 
    echo <span class="hljs-string">"export KUBECONFIG=${HOME}/.kube/contexts/$context.conf"</span> 
    chmod <span class="hljs-number">600</span> ${HOME}/.kube/<span class="hljs-built_in">contexts</span>/$<span class="hljs-built_in">context</span>.conf 
    <span class="hljs-built_in">break</span> 
  done 
} 

<span class="hljs-built_in">alias</span> kcs=<span class="hljs-string">"source &lt;(kubeswitch)"</span> </code></pre></div>
<h3 id="usage-2">Usage</h3>
<p>Running <code>kcs</code> alias command will show the cluster list from your <code>~/.kube/config</code> and you just need to type in the number of the cluster that you want to use.</p>
<div><pre class="hljs"><code><span class="hljs-variable">$ </span>kcs
<span class="hljs-number">1</span>) aks-cluster1
<span class="hljs-number">2</span>) aks-cluster2
<span class="hljs-number">3</span>) eks-cluster1
<span class="hljs-number">4</span>) eks-cluster1
<span class="hljs-number">5</span>) prod-cluster1
<span class="hljs-comment">#? </span></code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Joplin]]></title>
            <guid>c980c07a6e6e43199da8edadc67067d8</guid>
            <pubDate>Sun, 23 Jul 2023 06:22:25 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="why-joplin">Why Joplin?</h2>
<p>I was looking for a note-taking app and found that everyone hypes <a title="https://www.notion.so/" href="https://www.notion.so/">Notion</a> these days. I used to take notes on Google Keeps, OneNotes, and Mac's Notes. All these apps are limited in feature compare to Notion, and it also has nice and clean UI for enjoyable user experience. However, it is just a yet another freeware which has no native app support for Linux. For a FOSS supporter, this is a bad impression, no matter how good it is. So I looked for an alternative and ended up with Joplin. It is an open source and has all the features I wanted.</p>
<ol>
<li>App for Linux</li>
<li>Multi-device Sync</li>
<li>Markdown Support</li>
<li>Publishing the notes to Web</li>
<li>Drawing Support (draw.io and excalidraw)</li>
<li>Knowledge Graph</li>
</ol>
<h3 id="1-app-for-linux">1. App for Linux</h3>
<p>It is available in AppImage and easy to set up. Just download the AppImage file, set execute permission, then double-click on the file.<br />
Another option is running the installer script in Shell. It creates the desktop icon as well.</p>
<div><pre class="hljs"><code>wget -O - https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/laurent22/</span>joplin<span class="hljs-regexp">/dev/</span>Joplin_install_and_update.sh | bash</code></pre></div>
<h3 id="2-multi-device-sync">2. Multi-device Sync</h3>
<p>Joplin provides the commercial cloud service for the data sync but we can use other third-party cloud storages such as DropBox, OneDrive, NextCloud, or S3. I'm using DropBox.</p>
<h3 id="3-markdown-support">3. Markdown Support</h3>
<p>Markdown is the native format for Joplin but there are some plugins to make it look better. I don't use them as the default is enough for me.</p>
<h3 id="4-publishing-the-notes-to-web">4. Publishing the notes to Web</h3>
<p>This is the main feature I wanted. I used to write blogs hosted on <a title="https://pages.github.com/" href="https://pages.github.com/">GitHub Pages</a> by using a static site generator, <a title="https://gohugo.io/" href="https://gohugo.io/">Hugo</a>. Notion is way more better as there are a lot of free and paid templates, and also cool features. But publishing the notes with custom domain is not available in free account. My requirement is simple, just want to share some notes to public for my channel, <a title="https://www.youtube.com/@KnowYourLinux" href="https://www.youtube.com/@KnowYourLinux">KnowYourLinux</a> and it has to be organized. <a title="https://github.com/ylc395/joplin-plugin-pages-publisher" href="https://github.com/ylc395/joplin-plugin-pages-publisher">Joplin Pages Publisher</a> is good enough for that.</p>
<h3 id="5-drawing-support">5. Drawing Support</h3>
<p>I always use <a title="https://draw.io/" href="https://draw.io/">draw.io</a> for architecture diagrams and <a title="https://excalidraw.com/" href="https://excalidraw.com/">excalidraw</a> for some drafts and sketches. There are plugins for both. We can search and install draw.io plugin directly from the Plugins setting of Joplin app, but for excalidraw plugin, only lower version is available in there and it doesn't work with newer Joplin version. We need to download <code>.jpl</code> from the GitHub project and install manually from file.<br />
<a title="https://github.com/marc0l92/joplin-plugin-drawio" href="https://github.com/marc0l92/joplin-plugin-drawio">joplin-plugin-drawio</a><br />
<a title="https://github.com/artikell/joplin-excalidraw" href="https://github.com/artikell/joplin-excalidraw">joplin-excalidraw</a></p>
<h3 id="6-knowledge-graph">6. Knowledge Graph</h3>
<p>This one is just a fancy feature for me at the moment. I just want to give it a try.<br />
<a title="https://github.com/treymo/joplin-link-graph" href="https://github.com/treymo/joplin-link-graph">joplin-link-graph</a></p>
<p>I will add more if I found new useful features.</p>
<p>Cheers!</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fixing a broken sudoers file]]></title>
            <guid>fe5b60fbc1c7493b84290dcf5a95ef27</guid>
            <pubDate>Sun, 16 Jul 2023 14:48:58 GMT</pubDate>
            <content:encoded><![CDATA[<p>Need to open two SSH sessions to the server.</p>
<p><strong>Step 1</strong><br />
Get the process ID of the shell from the first SSH session.</p>
<div><pre class="hljs"><code>user<span class="hljs-variable">@server</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>echo <span class="hljs-variable">$$</span>
<span class="hljs-number">20486</span></code></pre></div>
<p><strong>Step 2</strong><br />
Start a PolicyKit authentication agent in the second session. Use the PID from the first step.</p>
<div><pre class="hljs"><code>user<span class="hljs-variable">@server</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>pkttyagent --process <span class="hljs-number">20486</span></code></pre></div>
<p><strong>Step 3</strong><br />
Open the sudoers file to be fixed in the first session by using <code>pkexec</code></p>
<div><pre class="hljs"><code>user<span class="hljs-variable">@server</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>pkexec vi /etc/sudoers</code></pre></div>
<p><strong>Step 4</strong><br />
Password prompt will appear in the second session. Login user account,  <code>user</code>, needs to be a sudoer and type in its password.</p>
<div><pre class="hljs"><code>user@server:~$ pkttyagent --process 20486
<span class="hljs-section">==== AUTHENTICATING FOR org.freedesktop.policykit.exec ===</span>
Authentication is needed to run <span class="hljs-string">`/usr/bin/vi'</span> as the super user
Authenticating as: User,,, (user)
Password:</code></pre></div>
<p><strong>Setp 5</strong><br />
The sudoers file will be opened in the first session. Fix or update as needed.</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JAVA Heap Analysis]]></title>
            <guid>a775414b6670437fa9e58c6b1a4755c6</guid>
            <pubDate>Fri, 30 Jun 2023 05:19:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="java-heap-analysis">JAVA Heap Analysis</h2>
<p>This is just a note for my personal use. To verify the Java heap usage, we can use <code>jstat</code> command.</p>
<p><code>jstat -gc &lt;PID&gt;</code></p>
<p>S0C - Eden space capacity<br />
S1C - Survivor space capacity<br />
EC - Eden space capacity<br />
OC - Old space capacity</p>
<p>S0U - Eden space utilization<br />
S1U - Survivor space utilization<br />
EU - Eden space utilization<br />
OU - Old space utilization</p>
<p>Heap Utilizaiton = S0U + S1U + EU + OU<br />
Heap Capacity = S0C + S1C + EC + OC</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[VIM Cheatsheet]]></title>
            <guid>b15c6c624ce945bab9be5c7655efcee3</guid>
            <pubDate>Fri, 26 May 2023 13:49:15 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="vim-cheatsheet">VIM Cheatsheet</h2>
<p><strong>Page Up/Down</strong><br />
<code>Ctrl+b</code> - full page up<br />
<code>Ctrl+f</code> - full page down<br />
<code>Ctrl+u</code> - half page up<br />
<code>Ctrl+d</code> - half page down</p>
<hr />
<p><strong>Explorer</strong><br />
<code>:Ex</code> - explore files<br />
<code>%</code> - new file<br />
<code>d</code> - new directory</p>
<hr />
<p><strong>Split</strong><br />
<code>:bd</code> - buffer delete</p>
<p><code>:copen</code> - list files<br />
<code>:cn</code> - next<br />
<code>:cp</code> - previous</p>
<p><code>:sp</code> - split<br />
<code>:vsp</code> - v-split</p>
<p><code>C+w [h,j,k,l]</code> - navigation</p>
<p><code>C+w =</code> - equal splits<br />
<code>C+w _</code> - max current split<br />
<code>C+w |</code> - max current v-split</p>
<hr />
<p><strong>Tab</strong><br />
<code>tabe</code> - tab edit<br />
<code>gt</code> - next tab e.g. gt, 3gt<br />
<code>gT</code> - previous tab<br />
<code>:tabnew</code> - new tab<br />
<code>:tabm</code> - move tab to right end<br />
<code>:tabm 0</code> - move tab to left end<br />
<code>:tabclose</code> - close tab<br />
<code>:tabonly</code> - active tab only<br />
<code>:tab ball</code> - open all buffer<br />
<code>:drop file.txt</code> - open file.txt in current tab<br />
<code>C+w T</code> - open the current split in new tab</p>
<hr />
<p><strong>Mark</strong><br />
<code>m[char]</code> - mark e.g. ma, mb, mc<br />
<code>'[char]</code> - go to marked line e.g. 'a, 'b, 'c<br />
<code> `[char]</code>  - go to marked position e.g. `a, `b<br />
<code>:marks</code> - list marks<br />
<code>:delmarks a,b,c</code> - delete marks<br />
<code>:delmarks!</code> - delete all marks</p>
<hr />
<p><strong>Fold</strong><br />
<code>zf</code> - fold selected visual lines<br />
<code>zo</code> - open fold<br />
<code>zc</code> - close fold<br />
<code>zd</code> - delete fold<br />
<code>zE</code> - delete all fold<br />
<code>zA</code> - open/close all fold in toggle</p>
<hr />
<p><strong>Explorer</strong><br />
<code>Ex</code> - horizontal explorer<br />
<code>Vex</code> - vertical explorer<br />
<code>gh</code> - hide/unhide hidden files<br />
<code>I</code> - hide/unhide banner<br />
<code>i</code> - change view style</p>
]]></content:encoded>
        </item>
    </channel>
</rss>